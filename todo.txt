sources of bugs:
	html does not match TS. To minimise, reduce variables in html and put them into TS

forms:
	foundation: 
		<form>, 
		<label for, 
		<input type="text" , 
		<select required>
			<option ></option>
		</select>
		<button type="submit", 
		</form>
	bootstrap css: container, form-group, form-control
	binding to model:
		<select>
			<option *ngFor="#p of powers" [value]="p">{{p}}</option>
		</select>
		where powers is an array of objects

		<input type="text" [(ngModel)]="model.name" >
		where model is the object, name is the property

		<select [(ngModel)]="model.power" >
			<option *ngFor="#p of powers" [value]="p">{{p}}</option>
		</select>
		where model is the object, power is the property

	Track change-state and validity with ngControl:
		Angular registers controls under their ngControl names with the NgForm
		<input type="text" ngControl="ngCtrlName" >
		NgControl updates the control with three classes that reflect the state.
			ng-touched	ng-untouched
			ng-dirty	ng-pristine
			ng-valid	ng-invalid


timesheet:
	style nav bar
	create invoice from timesheet
		invoice calls service
		when service gets back, close timesheet and pass timesheetId to invoice
		checkbox on save timesheet: create invoice
		if yes then when time sheet saved, call service to get invoice
		invoice is pass back to timesheetS in event and timesheetS refreshes the list then opens the invoice
		if no then different event is called, and timesheetS just refreshes the list

			
	re-structure folders


	

then:
	enter transaction
	enter invoice
	enter timesheet
	Bank accounts
	import bank transactions
	p and l
	balance sheet


	escape key to close modal


Later when tools have matured and I know a lot more
	when http returns to component, browser is updated by return values
	hide navbar options when not logged in or entity not chosen
	change password inputs disappear after a wrong current password is submitted




	

